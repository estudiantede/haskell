Parcial online de Introducción a la Programación (Algoritmos y Estructuras de Datos 1)

A partir de ahora estás en instancia de examen. Una vez que le des "Aceptar" a los términos y condiciones de esta página vas a estar accediendo a una instancia de evaluación formal, presencial en Exactas. Esto implica que este examen en computadora, tiene las mismas reglas que toda evaluación en la Universidad de Buenos Aires.

De acuerdo al Anexo del RÉGIMEN DISCIPLINARIO PARA ESTUDIANTES, Resolución (CS) 2283/881, podrán aplicarse sanciones de suspensión o apercibimiento en caso de contradecir dicho régimen. Modificar, alterar, tratar de romper, hackear, etc., el examen o los servidores y computadoras de ésta Universidad son motivo de apercibimiento. Las sanciones previstas en el artículo precedente serán individualizadas en cada caso, en forma proporcional a la gravedad de la falta cometida y al reproche que merezca el comportamiento del alumno.

Esta plataforma recopilará datos de la computadora que vas a utilizar para poder:

    Tomar asistencia
    Brindarte tu tema de examen con los ejercicios
    Almacenar tus respuestas para su evaluación

En la siguiente página te solicitaremos algunos datos personales para poder identificarte.

Esta información será almacenada en un servidor que se encuentra en la facultad, sin acceso a Internet.

Los datos recopilados serán los siguientes:

    Nombre,
    Apellido,
    DNI/Pasaporte,
    Libreta Universitaria,
    Email,
    Número identificador de computadora,
    Dirección MAC,
    Timestamp de cada envío.

Estos datos serán utilizados tanto para:

    Dejar registro de la computadora que estás utilizando,
    El horario de ingreso al parcial y
    Validación de identidad por parte del cuerpo docente durante la evaluación.

Te comprometes a ingresar estos datos de forma fehaciente.

Si por error cerrás el navegador, no te preocupes, podés volver a iniciar el proceso de carga del parcial (desde esta web inicial) todas las veces que necesites. Se registrarán tus datos y los datos de la computadora cada vez que lo hagas, dejando un historial de cambios realizados.

Una vez ingresados tus datos personales te brindaremos la hoja del parcial con los ejercicios del tema que se te asignó.

Podés trabajar en la computadora usando por ejemplo VS Code, o un editor de texto, y la consola para compilar. Sugerimos que vayas guardando el código en la computadora para no perderlo.

Te recordamos que no podrás hacer uso de otros dispositivos electrónicos. No podrás llevarte la copia del parcial o tus respuestas en un pendrive, o captura de pantalla u otro medio.

Una vez que tengas el código del examen completo, que vos quieras entregar, copialo y pegalo en la página del examen en el área destinada para completar con tu respuesta.

Al finalizar el examen, tenés que enviarlo presionando el botón correspondiente al final de la página con el enunciado. Te mostraremos el código que estás por enviar y te solicitaremos que presiones confirmar para enviarlo. En este paso, si querés corregir algo podés volver atrás.

Al ser una evaluación formal si desaprobas tenés derecho a rendir un recuperatorio.

Recordá cronometrar cuánto demorás en cada ejercicio para que te alcance el tiempo para realizar todos.

Muchos éxitos!
Entiendo y acepto las pautas


-----------------------------------------------------------------------------------------------------------------
 - EL PARCIAL VA DURAR 4 HS

-----------------------------------------------------------------------------------------------------------------

Template de funciones a implementar aca
Lista de funciones permitidas aca
Ejemplo de hunit aca

    Ejercicio 1
    Para empezar a diseñar la novedosa y rupturista red social Y el famoso Elio Mark nos ha pedido que desarrollemos algunas funciones básicas, que tendrán como objetido representar algunas relaciones e interacciones entre los usuarios. Para esto nos envió las siguientes especificaciones en lenguaje semiformal y nos pidió que hagamos el desarrollo enteramente en Haskell, utilizando los tipos requeridos y solamente las funciones que se ven en Introducción a la Programación de Exactas-UBA.

    problema relacionesValidas (relaciones: seq⟨String x String⟩) : Bool {
      requiere: {True}
      asegura: {(res = true) <=> relaciones no contiene ni tuplas repetidas1, ni tuplas con ambas componentes iguales}
    }
    1 A los fines de este problema consideraremos que dos tuplas son iguales si el par de elementos que las componen (sin importar el orden) son iguales.

    problema personas (relaciones: seq⟨String x String⟩) : seq⟨String⟩ {
      requiere: {relacionesValidas(relaciones)}
      asegura: {res no tiene elementos repetidos}
      asegura: {res tiene exactamente los elementos que figuran en alguna tupla de relaciones, en cualquiera de sus posiciones}
    }

    problema amigosDe (persona: String, relaciones: seq⟨String x String⟩) : seq⟨String⟩ {
      requiere: {relacionesValidas(relaciones)}
      asegura: {res tiene exactamente los elementos que figuran en las tuplas de relaciones en las que una de sus componentes es persona}
    }

    problema personaConMasAmigos (relaciones: seq⟨String x String⟩) : String {
      requiere: {relaciones no vacía}
      requiere: {relacionesValidas(relaciones)}
      asegura: {res es el Strings que aparece más veces en las tuplas de relaciones (o alguno de ellos si hay empate)}
    }

-----------------------------------------------------------------------------------------------------------------

Lista de funciones permitidas:

mod :: Integral a => a -> a -> a
div :: Integral a => a -> a -> a
fst :: (a, b) -> a
snd :: (a, b) -> b
sqrt :: Floating a => a -> a
(:) :: a -> [a] -> [a]
(++) :: [a] -> [a] -> [a]
head :: [a] -> a
tail :: [a] -> [a]
fromIntegral :: (Integral a, Num b) => a -> b
fromInteger :: Num a => Integer -> a
arim´eticas (+, -, *, /)
potencia (**, ^)
not :: Bool -> Bool
logicas (&&, ||, ==, /=, >, <, >=, <=) 


-----------------------------------------------------------------------------------------------------------------


 import Test.HUnit
import Simulacro

main = runTestTT tests

tests = test [
-- "nombre" ~: (funcion parametros) ~?= resultado_esperado
"componentes repetidas" ~: (relacionesValidas [("ana", "ana")]) ~?= False,
"tupla repetida" ~: (relacionesValidas [("ana", "pedro"), ("ana", "pedro")]) ~?= False,
"tupla repetida invertida" ~: (relacionesValidas [("ana", "pedro"), ("pedro", "ana")]) ~?= False,
"todas diferentes" ~: (relacionesValidas [("ana", "pedro"), ("ana", "carlos")]) ~?= True
]

-- -- Ejemplos

-- usuario1 = "Juan"
-- usuario2 = "Natalia"
-- usuario3 = "Pedro"

-- relacion1_2 = (usuario1, usuario2)
-- relacion1_1 = (usuario1, usuario1)
-- relacion1_3 = (usuario1, usuario3)


-- -- FUNCIONES PARA TESTING, NO BORRAR
-- -- expectAny permite saber si el elemenot que devuelve la función es alguno de los esperados
-- expectAny actual expected = elem actual expected ~? ("expected any of: " ++ show expected ++ "\n but got: " ++ show actual)


-- -- sonIguales permite ver que dos listas sean iguales si no importa el orden
-- quitar :: (Eq t) => t -> [t] -> [t]
-- -- requiere x pertenece a y
-- quitar x (y:ys)
-- | x == y = ys
-- | otherwise = y : quitar x ys

-- incluido :: (Eq t) => [t] -> [t] -> Bool
-- incluido [] l = True
-- incluido (x:c) l = elem x l && incluido c (quitar x l)

-- sonIguales :: (Eq t) => [t] -> [t] -> Bool
-- sonIguales xs ys = incluido xs ys && incluido ys xs 


-----------------------------------------------------------------------------------------------------------------

 relacionesValidas :: [(String, String)] -> Bool
relacionesValidas [] = False

personas :: [(String, String)] -> [String]
personas [] = "nadie"

amigosDe String -> [(String, String)] -> [String]
amigosDe "nadie" [] = "nadie"

personaConMasAmigos :: [(String, String)] -> String
personaConMasAmigos [] = "yo" 
